@page "/categories"
@using ErrorOr
@using MediatR
@using MoneyTrace.Application.Domain
@using MoneyTrace.Application.Features.Categories
@using MoneyTrace.Application.Infraestructure.Services
@using MoneyTrace.BlazorApp.Dto
@using MoneyTrace.BlazorApp.Services
@using Microsoft.JSInterop
@rendermode InteractiveServer
@inject IUserSecurityService UserSecurityService
@inject IMediator mediator
@inject IJSRuntime JSRuntime

<PageTitle>Account CRUD</PageTitle>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="fas fa-plus"></i> Add New Category
            </button>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }

    @if (successMessage != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Active</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (categories?.Any() == true)
                {
                    @foreach (var category in categories)
                    {
                        <tr>
                            <td>@category.Id</td>
                            <td>@category.Name</td>
                            <td>@category.Type</td>
                            <td>@category.IsEnabled</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditCategory(category)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(category)">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center text-muted">No categories found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Category" : "Create New Category")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentCategory" OnValidSubmit="SaveCategory">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (errorMessage != null)
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="currentCategory.Name" />
                            <ValidationMessage For="@(() => currentCategory.Name)" />
                        </div>

                        <div class="form-check form-switch mb-3">
                            <InputCheckbox id="isenabled" class="form-check-input" @bind-Value="currentCategory.IsEnabled" role="switch"/>
                            <label for="isenabled" class="form-check-label">Active</label>
                            <ValidationMessage For="@(() => currentCategory.IsEnabled)" />
                        </div>

                        <div class="mb-3">
                            <InputRadioGroup @bind-Value="currentCategory.Type">
                                <InputRadio Value="CategoryType.Expense" id="ExpenseRadio" class="form-check-input"/> 
                                <label class="form-check-label" for="ExpenseRadio">Expense</label>
                                <InputRadio Value="CategoryType.Income" id="IncomeRadio" class="form-check-input"/> 
                                <label class="form-check-label" for="IncomeRadio">Income</label>
                            </InputRadioGroup>
                            <ValidationMessage For="@(() => currentCategory.Type)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                @(isEditing ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<CategoryDto> categories = new();
    private CategoryDto currentCategory = new(0, string.Empty, CategoryType.Expense, true, [], 0);
    private bool showModal = false;
    private bool isEditing = false;
    private bool isLoading = false;
    private bool isSaving = false;
    private string? errorMessage;
    private string? successMessage;
    private int userId = 0;

    protected override async Task OnInitializedAsync()
    {
        userId = await UserSecurityService.GetUserId();
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        errorMessage = null;

        var query = new GetUserCategoriesQuery(userId);
        var result = await mediator.Send(query);

        if (result.IsError)
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
        else
        {
            categories = result.Value.Select(x => x.ToDto()).ToList();
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task SaveCategory()
    {
        isSaving = true;
        errorMessage = null;
        successMessage = null;

        ErrorOr<CategoryEntity> result;

        if (isEditing)
        {
            result = await mediator.Send(currentCategory.ToUpdateCommand(userId));
        }
        else
        {
            result = await mediator.Send(currentCategory.ToCreateCommand(userId));
        }

        if (result.IsError)
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
        else
        {
            successMessage = $"Product {(isEditing ? "updated" : "created")} successfully!";
            CloseModal();
            await LoadCategories();
        }

        isSaving = false;
        StateHasChanged();
    }

    private void ShowCreateModal()
    {
        currentCategory = new(0, string.Empty, CategoryType.Expense, true, [], userId);
        isEditing = false;
        showModal = true;
    }

    private void EditCategory(CategoryDto category)
    {
        currentCategory = category;
        isEditing = true;
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        currentCategory = new(0, string.Empty, CategoryType.Expense, true, [], 0);
        isEditing = false;
    }

    private async Task ShowDeleteConfirmation(CategoryDto category)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete '{category.Name}'?");
        
        if (confirmed)
        {
            await DeleteProduct(category.Id);
        }
    }

    private async Task DeleteProduct(int id)
    {
        errorMessage = null;
        successMessage = null;

        var result = await mediator.Send(new DeleteCategoryCommand(id, userId));

        if (result.IsError)
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
        else
        {
            successMessage = "Category deleted successfully!";
            await LoadCategories();
        }

        StateHasChanged();
    }

    private void ClearError() => errorMessage = null;
    private void ClearSuccess() => successMessage = null;
}